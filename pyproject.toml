[project]
name = "contribute_to_open_source"
dynamic = ["version"]
description = "Tool to help one to contribute to Open Source projects. Goal is to search Github for open issues that might be interesting."
authors = [
    {name = "Mike Weltevrede", email = "mikeweltevrede@gmail.com"},
]
readme = "README.md"
packages = [
  {include = "contribute_to_open_source"}
]
requires-python = ">=3.9,<4.0"
dependencies = []
license = {text = "MIT license"}
keywords = ['python']

[tool.pdm.version]
source = "scm"

[project.urls]
Homepage = "https://github.com/mikeweltevrede/contribute-to-open-source/"
Repository = "https://github.com/mikeweltevrede/contribute-to-open-source"
Documentation = "https://github.com/mikeweltevrede/contribute-to-open-source/"

[tool.pdm.dev-dependencies]
test = [
  "pytest>=7.2.0",
  "pytest-cov>=4.0.0"
  ]
dev = [
"deptry>=0.6.4",
"mypy>=0.981",
  "pre-commit>=2.20.0",
  "tox>=3.25.1"
]
docs = [
  "mkdocs>=1.4.2",
  "mkdocs-material>=8.5.10",
  "mkdocstrings[python]>=0.19.0"
]

[tool.pdm.build]
excludes = ["./**/.git"]
package-dir = "."
includes = ["contribute_to_open_source"]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.mypy]
files = ["contribute_to_open_source"]
disallow_untyped_defs = "True"
disallow_any_unimported = "True"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"

[tool.ruff]
src = ["contribute_to_open_source", "tests"]
extend-exclude = ["__init__.py"]
line-length = 120
fix = true
show-fixes = true

[tool.ruff.format]
docstring-code-format = true
skip-magic-trailing-comma = true

[tool.ruff.lint]
select = [
    "F",                            # pyflakes              | Check for errors
    "E", "W",                       # pycodestyle           | Some of the style conventions in PEP 8
    "C90",                          # mccabe                | Cyclomatic complexity
    "I",                            # isort                 | Sort imports
    "N",                            # pep8-naming           | PEP 8 naming conventions
    "D", "D204", "D400", "D401",    # pydocstyle            | Docstring conventions
    "UP",                           # pyupgrade             | Upgrade syntax for newer versions of the language
    "YTT",                          # flake8-2020           | Misuse of sys.version or sys.version_info
    "S",                            # flake8-bandit         | Security testing
    "B",                            # flake8-bugbear        | Check likely bugs and design problems
    "A",                            # flake8-builtins       | Python builtins being used as variables or parameters
    "C4",                           # flake8-comprehensions | Better list/set/dict comprehensions
    "T10",                          # flake8-debugger       | Presence of debugger calls and imports
    "SIM",                          # flake8-simplify       | Simplify code, e.g. checking superfluous code
    "PGH",                          # pygrep-hooks          | Regex based pre-commit hooks
    "TRY",                          # tryceratops           | Exception handling antipatterns
    "RUF",                          # ruff                  | Miscellaneous linting
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.isort]
combine-as-imports = true
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["test_*"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 120

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["contribute_to_open_source"]
